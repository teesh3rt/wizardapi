// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWizard = `-- name: CreateWizard :exec
INSERT INTO wizards (name, bio) VALUES ($1, $2) RETURNING id, name, level, bio
`

type CreateWizardParams struct {
	Name string
	Bio  string
}

func (q *Queries) CreateWizard(ctx context.Context, arg CreateWizardParams) error {
	_, err := q.db.Exec(ctx, createWizard, arg.Name, arg.Bio)
	return err
}

const deleteWizard = `-- name: DeleteWizard :exec
DELETE FROM wizards WHERE id = $1
`

func (q *Queries) DeleteWizard(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteWizard, id)
	return err
}

const getAllWizards = `-- name: GetAllWizards :many
SELECT id, name, level, bio FROM wizards
`

func (q *Queries) GetAllWizards(ctx context.Context) ([]Wizard, error) {
	rows, err := q.db.Query(ctx, getAllWizards)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Wizard
	for rows.Next() {
		var i Wizard
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Level,
			&i.Bio,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWizard = `-- name: GetWizard :one
SELECT id, name, level, bio FROM wizards WHERE id = $1 LIMIT 1
`

func (q *Queries) GetWizard(ctx context.Context, id pgtype.UUID) (Wizard, error) {
	row := q.db.QueryRow(ctx, getWizard, id)
	var i Wizard
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Level,
		&i.Bio,
	)
	return i, err
}
